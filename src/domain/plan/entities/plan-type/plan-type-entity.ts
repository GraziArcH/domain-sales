import { IdValueObject } from "../../value-objects";
import { IPlanTypeRepository } from "../../interfaces/database";
import { PlanTypeEntityModel } from "./plan-type-entity-model";
import { PlanTypeDTO } from "./plan-type-dtos";

export class PlanTypeEntity {
    constructor(private readonly repository: IPlanTypeRepository) {}

    async getById(planTypeId: string | number): Promise<PlanTypeEntityModel | null> {
        const planTypeIdObj = IdValueObject.create(planTypeId);
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const planType = await this.repository.getById(planTypeIdObj);
        if (!planType) return null;

        return PlanTypeEntityModel.create({
            planTypeId: planType.plan_type_id.value,
            typeName: planType.type_name,
            description: planType.description,
            isActive: planType.is_active
        });
    }

    async getAll(): Promise<PlanTypeEntityModel[]> {
        const planTypes = await this.repository.getAll();

        return planTypes.map((planType) =>
            PlanTypeEntityModel.create({
                planTypeId: planType.plan_type_id.value,
                typeName: planType.type_name,
                description: planType.description,
                isActive: planType.is_active
            })
        );
    }

    async create(planTypeData: Omit<PlanTypeDTO, "planTypeId">): Promise<PlanTypeEntityModel> {
        const planTypeModel = PlanTypeEntityModel.create({
            planTypeId: 0, // Will be generated by the database
            ...planTypeData
        });

        const values = planTypeModel.getValues();

        const planTypeIdObj = IdValueObject.create(values.planTypeId);
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const planType = {
            plan_type_id: planTypeIdObj,
            type_name: values.typeName,
            description: values.description,
            is_active: values.isActive
        };

        const createdPlanType = await this.repository.create(planType);

        // Return the created plan type as an entity model
        return PlanTypeEntityModel.create({
            planTypeId: createdPlanType.plan_type_id.value,
            typeName: createdPlanType.type_name,
            description: createdPlanType.description,
            isActive: createdPlanType.is_active
        });
    }

    async update(planTypeData: PlanTypeDTO): Promise<PlanTypeEntityModel> {
        const planTypeModel = PlanTypeEntityModel.create(planTypeData);
        const values = planTypeModel.getValues();

        const planTypeIdObj = IdValueObject.create(values.planTypeId);
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const planType = {
            plan_type_id: planTypeIdObj,
            type_name: values.typeName,
            description: values.description,
            is_active: values.isActive
        };

        const updatedPlanType = await this.repository.update(planType);

        // Return the updated plan type as an entity model
        return PlanTypeEntityModel.create({
            planTypeId: updatedPlanType.plan_type_id.value,
            typeName: updatedPlanType.type_name,
            description: updatedPlanType.description,
            isActive: updatedPlanType.is_active
        });
    }

    async delete(planTypeId: string | number): Promise<boolean> {
        const planTypeIdObj = IdValueObject.create(planTypeId);
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        return await this.repository.delete(planTypeIdObj);
    }
}
