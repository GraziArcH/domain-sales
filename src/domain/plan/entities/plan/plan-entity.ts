import { IdValueObject } from "../../value-objects";
import { IPlanRepository } from "../../interfaces/database";
import { PlanEntityModel } from "./plan-entity-model";
import { PlanDTO } from "./plan-dtos";

export class PlanEntity {
    constructor(private readonly repository: IPlanRepository) {}

    async getById(planId: string | number): Promise<PlanEntityModel | null> {
        const planIdObj = IdValueObject.create(planId);
        if (planIdObj instanceof Error) throw planIdObj;

        const plan = await this.repository.getPlanById(planIdObj);
        if (!plan) return null;

        return PlanEntityModel.create({
            planId: plan.plan_id.value,
            planName: plan.plan_name,
            description: plan.description,
            defaultAmount: plan.default_amount,
            planDuration: plan.plan_duration as "mensal" | "anual" | "trimestral" | "vitalicio",
            planTypeId: plan.plan_type_id.value,
            createdAt: plan.created_at,
            updatedAt: plan.updated_at
        });
    }

    async getAll(): Promise<PlanEntityModel[]> {
        const plans = await this.repository.getAll();

        return plans.map((plan) =>
            PlanEntityModel.create({
                planId: plan.plan_id.value,
                planName: plan.plan_name,
                description: plan.description,
                defaultAmount: plan.default_amount,
                planDuration: plan.plan_duration as "mensal" | "anual" | "trimestral" | "vitalicio",
                planTypeId: plan.plan_type_id.value,
                createdAt: plan.created_at,
                updatedAt: plan.updated_at
            })
        );
    }

    async create(planData: Omit<PlanDTO, "planId" | "createdAt" | "updatedAt">): Promise<PlanEntityModel> {
        const now = new Date();

        const planModel = PlanEntityModel.create({
            planId: 0, // Will be generated by the database
            ...planData,
            createdAt: now,
            updatedAt: now
        });

        const values = planModel.getValues();

        const planIdObj = IdValueObject.create(values.planId);
        const planTypeIdObj = IdValueObject.create(values.planTypeId);

        if (planIdObj instanceof Error) throw planIdObj;
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const plan = {
            plan_id: planIdObj,
            plan_name: values.planName,
            description: values.description,
            default_amount: values.defaultAmount,
            plan_duration: values.planDuration,
            plan_type_id: planTypeIdObj,
            created_at: values.createdAt,
            updated_at: values.updatedAt
        };

        const createdPlan = await this.repository.create(plan);

        // Return the created plan as an entity model
        return PlanEntityModel.create({
            planId: createdPlan.plan_id.value,
            planName: createdPlan.plan_name,
            description: createdPlan.description,
            defaultAmount: createdPlan.default_amount,
            planDuration: createdPlan.plan_duration as "mensal" | "anual" | "trimestral" | "vitalicio",
            planTypeId: createdPlan.plan_type_id.value,
            createdAt: createdPlan.created_at,
            updatedAt: createdPlan.updated_at
        });
    }

    async update(planData: PlanDTO): Promise<PlanEntityModel> {
        const planModel = PlanEntityModel.create({
            ...planData,
            updatedAt: new Date()
        });

        const values = planModel.getValues();

        const planIdObj = IdValueObject.create(values.planId);
        const planTypeIdObj = IdValueObject.create(values.planTypeId);

        if (planIdObj instanceof Error) throw planIdObj;
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const plan = {
            plan_id: planIdObj,
            plan_name: values.planName,
            description: values.description,
            default_amount: values.defaultAmount,
            plan_duration: values.planDuration,
            plan_type_id: planTypeIdObj,
            created_at: values.createdAt,
            updated_at: values.updatedAt
        };

        const updatedPlan = await this.repository.update(plan);

        // Return the updated plan as an entity model
        return PlanEntityModel.create({
            planId: updatedPlan.plan_id.value,
            planName: updatedPlan.plan_name,
            description: updatedPlan.description,
            defaultAmount: updatedPlan.default_amount,
            planDuration: updatedPlan.plan_duration as "mensal" | "anual" | "trimestral" | "vitalicio",
            planTypeId: updatedPlan.plan_type_id.value,
            createdAt: updatedPlan.created_at,
            updatedAt: updatedPlan.updated_at
        });
    }
}
