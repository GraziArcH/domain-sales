import { IdValueObject } from "../../value-objects";
import { ICompanyPlanHistoryRepository } from "../../interfaces/database/company-plan-history-repository";
import { CompanyPlanHistoryEntityModel } from "./company-plan-history-entity-model";
import { CompanyPlanHistoryCreateDTO } from "./company-plan-history-dtos";

export class CompanyPlanHistoryEntity {
    constructor(private repository: ICompanyPlanHistoryRepository) {}

    async create(data: CompanyPlanHistoryCreateDTO): Promise<CompanyPlanHistoryEntityModel> {
        const now = new Date();

        const entityModel = CompanyPlanHistoryEntityModel.create({
            historyId: 0, // Will be generated by the database
            ...data,
            createdAt: now
        });

        const values = entityModel.getValues();

        const result = await this.repository.create({
            history_id: IdValueObject.create(0) as IdValueObject,
            company_plan_id: IdValueObject.create(values.companyPlanId) as IdValueObject,
            previous_plan_id: values.previousPlanId
                ? (IdValueObject.create(values.previousPlanId) as IdValueObject)
                : null,
            new_plan_id: IdValueObject.create(values.newPlanId) as IdValueObject,
            change_type: values.changeType,
            reason: values.reason || null,
            change_at: values.changeAt,
            changed_by_user_id: IdValueObject.create(values.changedByUserId) as IdValueObject,
            created_at: values.createdAt
        });

        return CompanyPlanHistoryEntityModel.create({
            historyId: result.history_id.value,
            companyPlanId: result.company_plan_id.value,
            previousPlanId: result.previous_plan_id?.value,
            newPlanId: result.new_plan_id.value,
            changeType: result.change_type,
            reason: result.reason || undefined,
            changeAt: result.change_at,
            changedByUserId: result.changed_by_user_id.value,
            createdAt: result.created_at
        });
    }

    async getByCompanyPlanId(companyPlanId: string | number): Promise<CompanyPlanHistoryEntityModel[]> {
        const companyPlanIdObj = IdValueObject.create(companyPlanId);
        if (companyPlanIdObj instanceof Error) throw companyPlanIdObj;

        const results = await this.repository.getByCompanyPlanId(companyPlanIdObj);

        return results.map((result) =>
            CompanyPlanHistoryEntityModel.create({
                historyId: result.history_id.value,
                companyPlanId: result.company_plan_id.value,
                previousPlanId: result.previous_plan_id?.value,
                newPlanId: result.new_plan_id.value,
                changeType: result.change_type,
                reason: result.reason || undefined,
                changeAt: result.change_at,
                changedByUserId: result.changed_by_user_id.value,
                createdAt: result.created_at
            })
        );
    }

    async getRecentByCompanyPlanId(
        companyPlanId: string | number,
        limit?: number
    ): Promise<CompanyPlanHistoryEntityModel[]> {
        const companyPlanIdObj = IdValueObject.create(companyPlanId);
        if (companyPlanIdObj instanceof Error) throw companyPlanIdObj;

        const results = await this.repository.getRecentByCompanyPlanId(companyPlanIdObj, limit);

        return results.map((result) =>
            CompanyPlanHistoryEntityModel.create({
                historyId: result.history_id.value,
                companyPlanId: result.company_plan_id.value,
                previousPlanId: result.previous_plan_id?.value,
                newPlanId: result.new_plan_id.value,
                changeType: result.change_type,
                reason: result.reason || undefined,
                changeAt: result.change_at,
                changedByUserId: result.changed_by_user_id.value,
                createdAt: result.created_at
            })
        );
    }
}
