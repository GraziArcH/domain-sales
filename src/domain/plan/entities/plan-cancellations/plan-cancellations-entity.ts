import { IdValueObject } from "../../value-objects";
import { IPlanCancellationsRepository } from "../../interfaces/database/plan-cancellations-repository";
import { PlanCancellationEntityModel } from "./plan-cancellations-entity-model";
import { PlanCancellationCreateDTO } from "./plan-cancellations-dtos";

export class PlanCancellationEntity {
    constructor(private readonly repository: IPlanCancellationsRepository) { }

    async getById(cancellationId: string | number): Promise<PlanCancellationEntityModel | null> {
        const cancellationIdObj = IdValueObject.create(cancellationId);
        if (cancellationIdObj instanceof Error) throw cancellationIdObj;

        const cancellation = await this.repository.getById(cancellationIdObj);
        if (!cancellation) return null;

        return PlanCancellationEntityModel.create({
            planCancellationId: cancellation.plan_cancellation_id.value,
            companyPlanId: cancellation.company_plan_id.value,
            cancellationReason: cancellation.cancellation_reason,
            cancelledByUserId: cancellation.cancelled_by_user_id.value,
            cancelledAt: cancellation.cancelled_at,
            createdAt: cancellation.created_at,
            updatedAt: cancellation.updated_at
        });
    }

    async getByCompanyPlanId(companyPlanId: string | number): Promise<PlanCancellationEntityModel[]> {
        const companyPlanIdObj = IdValueObject.create(companyPlanId);
        if (companyPlanIdObj instanceof Error) throw companyPlanIdObj;
        const cancellations = await this.repository.getByCompanyPlanId(companyPlanIdObj);

        return cancellations.map((cancellation) =>
            PlanCancellationEntityModel.create({
                planCancellationId: cancellation.plan_cancellation_id.value,
                companyPlanId: cancellation.company_plan_id.value,
                cancellationReason: cancellation.cancellation_reason,
                cancelledByUserId: cancellation.cancelled_by_user_id.value,
                cancelledAt: cancellation.cancelled_at,
                createdAt: cancellation.created_at,
                updatedAt: cancellation.updated_at
            })
        );
    }

    async create(data: PlanCancellationCreateDTO): Promise<PlanCancellationEntityModel> {
        const now = new Date();

        const entityModel = PlanCancellationEntityModel.create({
            planCancellationId: 0, // Will be generated by the database
            ...data,
            createdAt: now,
            updatedAt: now
        });

        const values = entityModel.getValues();

        const result = await this.repository.create({
            plan_cancellation_id: IdValueObject.create(0) as IdValueObject,
            company_plan_id: IdValueObject.create(values.companyPlanId) as IdValueObject,
            cancellation_reason: values.cancellationReason,
            cancelled_by_user_id: IdValueObject.create(values.cancelledByUserId) as IdValueObject,
            cancelled_at: values.cancelledAt,
            created_at: values.createdAt,
            updated_at: values.updatedAt
        });

        return PlanCancellationEntityModel.create({
            planCancellationId: result.plan_cancellation_id.value,
            companyPlanId: result.company_plan_id.value,
            cancellationReason: result.cancellation_reason,
            cancelledByUserId: result.cancelled_by_user_id.value,
            cancelledAt: result.cancelled_at,
            createdAt: result.created_at,
            updatedAt: result.updated_at
        });
    }
}
