import { IdValueObject } from "../../value-objects";
import { IPlanUserOverrideRepository } from "../../interfaces/database/plan-user-override-repository";
import { PlanUserOverrideEntityModel } from "./plan-user-override-entity-model";
import { PlanUserOverrideCreateDTO, PlanUserOverrideDTO } from "./plan-user-override-dtos";

export class PlanUserOverrideEntity {
    constructor(private repository: IPlanUserOverrideRepository) {}

    async create(data: PlanUserOverrideCreateDTO): Promise<PlanUserOverrideEntityModel> {
        const now = new Date();

        const entityModel = PlanUserOverrideEntityModel.create({
            overrideId: 0, // Will be generated by the database
            ...data,
            createdAt: now,
            updatedAt: now
        });

        const values = entityModel.getValues();

        const result = await this.repository.create({
            plan_user_override_id: IdValueObject.create(0) as IdValueObject,
            company_plan_id: IdValueObject.create(values.companyPlanId) as IdValueObject,
            admin: values.admin,
            extra_user_price: values.extraUserPrice,
            created_at: values.createdAt,
            updated_at: values.updatedAt
        });

        return PlanUserOverrideEntityModel.create({
            overrideId: result.plan_user_override_id.value,
            companyPlanId: result.company_plan_id.value,
            admin: result.admin,
            extraUserPrice: result.extra_user_price,
            createdAt: result.created_at,
            updatedAt: result.updated_at
        });
    }

    async getById(overrideId: string | number): Promise<PlanUserOverrideEntityModel | null> {
        const overrideIdObj = IdValueObject.create(overrideId);
        if (overrideIdObj instanceof Error) throw overrideIdObj;

        const result = await this.repository.getById(overrideIdObj);

        if (!result) return null;

        return PlanUserOverrideEntityModel.create({
            overrideId: result.plan_user_override_id.value,
            companyPlanId: result.company_plan_id.value,
            admin: result.admin,
            extraUserPrice: result.extra_user_price,
            createdAt: result.created_at,
            updatedAt: result.updated_at
        });
    }

    async getByCompanyPlanId(companyPlanId: string | number): Promise<PlanUserOverrideEntityModel[]> {
        const companyPlanIdObj = IdValueObject.create(companyPlanId);
        if (companyPlanIdObj instanceof Error) throw companyPlanIdObj;

        const results = await this.repository.getByCompanyPlanId(companyPlanIdObj);

        return results.map((result) =>
            PlanUserOverrideEntityModel.create({
                overrideId: result.plan_user_override_id.value,
                companyPlanId: result.company_plan_id.value,
                admin: result.admin,
                extraUserPrice: result.extra_user_price,
                createdAt: result.created_at,
                updatedAt: result.updated_at
            })
        );
    }

    async getByCompanyPlanIdAndAdmin(
        companyPlanId: string | number,
        isAdmin: boolean
    ): Promise<PlanUserOverrideEntityModel | null> {
        const companyPlanIdObj = IdValueObject.create(companyPlanId);
        if (companyPlanIdObj instanceof Error) throw companyPlanIdObj;

        const result = await this.repository.getByCompanyPlanIdAndAdmin(companyPlanIdObj, isAdmin);

        if (!result) return null;

        return PlanUserOverrideEntityModel.create({
            overrideId: result.plan_user_override_id.value,
            companyPlanId: result.company_plan_id.value,
            admin: result.admin,
            extraUserPrice: result.extra_user_price,
            createdAt: result.created_at,
            updatedAt: result.updated_at
        });
    }

    async update(data: PlanUserOverrideDTO): Promise<PlanUserOverrideEntityModel> {
        const now = new Date();
        const entityModel = PlanUserOverrideEntityModel.create({
            ...data,
            updatedAt: now
        });

        const values = entityModel.getValues();

        const overrideIdObj = IdValueObject.create(values.overrideId);
        const companyPlanIdObj = IdValueObject.create(values.companyPlanId);

        if (overrideIdObj instanceof Error) throw overrideIdObj;
        if (companyPlanIdObj instanceof Error) throw companyPlanIdObj;

        const override = {
            plan_user_override_id: overrideIdObj,
            company_plan_id: companyPlanIdObj,
            admin: values.admin,
            extra_user_price: values.extraUserPrice,
            created_at: values.createdAt,
            updated_at: values.updatedAt
        };

        const updatedOverride = await this.repository.update(override);

        return PlanUserOverrideEntityModel.create({
            overrideId: updatedOverride.plan_user_override_id.value,
            companyPlanId: updatedOverride.company_plan_id.value,
            admin: updatedOverride.admin,
            extraUserPrice: updatedOverride.extra_user_price,
            createdAt: updatedOverride.created_at,
            updatedAt: updatedOverride.updated_at
        });
    }

    async delete(overrideId: string | number): Promise<boolean> {
        const overrideIdObj = IdValueObject.create(overrideId);
        if (overrideIdObj instanceof Error) throw overrideIdObj;

        return await this.repository.delete(overrideIdObj);
    }
}
