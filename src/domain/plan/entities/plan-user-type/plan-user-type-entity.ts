import { IdValueObject } from "../../value-objects";
import { IPlanUserTypeRepository } from "../../interfaces/database";
import { PlanUserTypeEntityModel } from "./plan-user-type-entity-model";
import { PlanUserTypeDTO } from "./plan-user-type-dtos";

export class PlanUserTypeEntity {
    constructor(private readonly repository: IPlanUserTypeRepository) {}

    async getById(planUserTypeId: string | number): Promise<PlanUserTypeEntityModel | null> {
        const planUserTypeIdObj = IdValueObject.create(planUserTypeId);
        if (planUserTypeIdObj instanceof Error) throw planUserTypeIdObj;

        const planUserType = await this.repository.getById(planUserTypeIdObj);
        if (!planUserType) return null;

        return PlanUserTypeEntityModel.create({
            planUserTypeId: planUserType.plan_user_type_id.value,
            planTypeId: planUserType.plan_type_id.value,
            admin: planUserType.admin,
            numberOfUsers: planUserType.number_of_users,
            extraUserPrice: planUserType.extra_user_price
        });
    }

    async getByPlanTypeId(planTypeId: string | number): Promise<PlanUserTypeEntityModel[]> {
        const planTypeIdObj = IdValueObject.create(planTypeId);
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const planUserTypes = await this.repository.getByPlanTypeId(planTypeIdObj);

        return planUserTypes.map((planUserType) =>
            PlanUserTypeEntityModel.create({
                planUserTypeId: planUserType.plan_user_type_id.value,
                planTypeId: planUserType.plan_type_id.value,
                admin: planUserType.admin,
                numberOfUsers: planUserType.number_of_users,
                extraUserPrice: planUserType.extra_user_price
            })
        );
    }

    async getByPlanTypeIdAndAdmin(
        planTypeId: string | number,
        admin: boolean
    ): Promise<PlanUserTypeEntityModel | null> {
        const planTypeIdObj = IdValueObject.create(planTypeId);
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const planUserType = await this.repository.getByPlanTypeIdAndAdmin(planTypeIdObj, admin);
        if (!planUserType) return null;

        return PlanUserTypeEntityModel.create({
            planUserTypeId: planUserType.plan_user_type_id.value,
            planTypeId: planUserType.plan_type_id.value,
            admin: planUserType.admin,
            numberOfUsers: planUserType.number_of_users,
            extraUserPrice: planUserType.extra_user_price
        });
    }

    async create(planUserTypeData: Omit<PlanUserTypeDTO, "planUserTypeId">): Promise<PlanUserTypeEntityModel> {
        const planUserTypeModel = PlanUserTypeEntityModel.create({
            planUserTypeId: 0, // Will be generated by the database
            ...planUserTypeData
        });

        const values = planUserTypeModel.getValues();

        const planUserTypeIdObj = IdValueObject.create(values.planUserTypeId);
        const planTypeIdObj = IdValueObject.create(values.planTypeId);

        if (planUserTypeIdObj instanceof Error) throw planUserTypeIdObj;
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const planUserType = {
            plan_user_type_id: planUserTypeIdObj,
            plan_type_id: planTypeIdObj,
            admin: values.admin,
            number_of_users: values.numberOfUsers,
            extra_user_price: values.extraUserPrice
        };

        const createdPlanUserType = await this.repository.create(planUserType);

        // Return the created plan user type as an entity model
        return PlanUserTypeEntityModel.create({
            planUserTypeId: createdPlanUserType.plan_user_type_id.value,
            planTypeId: createdPlanUserType.plan_type_id.value,
            admin: createdPlanUserType.admin,
            numberOfUsers: createdPlanUserType.number_of_users,
            extraUserPrice: createdPlanUserType.extra_user_price
        });
    }

    async update(planUserTypeData: PlanUserTypeDTO): Promise<PlanUserTypeEntityModel> {
        const planUserTypeModel = PlanUserTypeEntityModel.create(planUserTypeData);
        const values = planUserTypeModel.getValues();

        const planUserTypeIdObj = IdValueObject.create(values.planUserTypeId);
        const planTypeIdObj = IdValueObject.create(values.planTypeId);

        if (planUserTypeIdObj instanceof Error) throw planUserTypeIdObj;
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const planUserType = {
            plan_user_type_id: planUserTypeIdObj,
            plan_type_id: planTypeIdObj,
            admin: values.admin,
            number_of_users: values.numberOfUsers,
            extra_user_price: values.extraUserPrice
        };

        const updatedPlanUserType = await this.repository.update(planUserType);

        // Return the updated plan user type as an entity model
        return PlanUserTypeEntityModel.create({
            planUserTypeId: updatedPlanUserType.plan_user_type_id.value,
            planTypeId: updatedPlanUserType.plan_type_id.value,
            admin: updatedPlanUserType.admin,
            numberOfUsers: updatedPlanUserType.number_of_users,
            extraUserPrice: updatedPlanUserType.extra_user_price
        });
    }

    async delete(planUserTypeId: string | number): Promise<boolean> {
        const planUserTypeIdObj = IdValueObject.create(planUserTypeId);
        if (planUserTypeIdObj instanceof Error) throw planUserTypeIdObj;

        return await this.repository.delete(planUserTypeIdObj);
    }
}
