import { IdValueObject } from "../../value-objects";
import { IPlanReportsRepository } from "../../interfaces/database/plan-reports-repository";
import { PlanReportEntityModel } from "./plan-reports-entity-model";
import { PlanReportCreateDTO, type PlanReportUpdateDTO } from "./plan-reports-dtos";

export class PlanReportEntity {
    constructor(private readonly repository: IPlanReportsRepository) { }

    async getByPlanTypeId(planTypeId: string | number): Promise<PlanReportEntityModel[]> {
        const planTypeIdObj = IdValueObject.create(planTypeId);
        if (planTypeIdObj instanceof Error) throw planTypeIdObj;

        const planReports = await this.repository.getByPlanTypeId(planTypeIdObj);

        return planReports.map((report) =>
            PlanReportEntityModel.create({
                planReportId: report.plan_report_id.value,
                planTypeId: report.plan_type_id.value,
                templateId: report.template_id.value
            })
        );
    }

    async getByTemplateId(templateId: string | number): Promise<PlanReportEntityModel[]> {
        const templateIdObj = IdValueObject.create(templateId);
        if (templateIdObj instanceof Error) throw templateIdObj;

        const planReports = await this.repository.getByTemplateId(templateIdObj);

        return planReports.map((report) =>
            PlanReportEntityModel.create({
                planReportId: report.plan_report_id.value,
                planTypeId: report.plan_type_id.value,
                templateId: report.template_id.value
            })
        );
    }

    async create(data: PlanReportCreateDTO): Promise<PlanReportEntityModel> {
        const entityModel = PlanReportEntityModel.create({
            planReportId: 0, // Will be generated by the database
            ...data
        });

        const values = entityModel.getValues();

        const result = await this.repository.create({
            plan_report_id: IdValueObject.create(0) as IdValueObject,
            plan_type_id: IdValueObject.create(values.planTypeId) as IdValueObject,
            template_id: IdValueObject.create(values.templateId) as IdValueObject
        });

        return PlanReportEntityModel.create({
            planReportId: result.plan_report_id.value,
            planTypeId: result.plan_type_id.value,
            templateId: result.template_id.value
        });
    }

    async update(data: PlanReportUpdateDTO): Promise<PlanReportEntityModel> {
        const entityModel = PlanReportEntityModel.create(data);
        const values = entityModel.getValues();

        const result = await this.repository.update({
            plan_report_id: IdValueObject.create(values.planReportId) as IdValueObject,
            plan_type_id: IdValueObject.create(values.planTypeId) as IdValueObject,
            template_id: IdValueObject.create(values.templateId) as IdValueObject
        });

        return PlanReportEntityModel.create({
            planReportId: result.plan_report_id.value,
            planTypeId: result.plan_type_id.value,
            templateId: result.template_id.value
        });
    }

    async delete(planReportId: string | number): Promise<boolean> {
        const planReportIdObj = IdValueObject.create(planReportId);
        if (planReportIdObj instanceof Error) throw planReportIdObj;

        return await this.repository.delete(planReportIdObj);
    }
}
