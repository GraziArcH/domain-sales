export class IdValueObject {
    private constructor(public readonly value: number) {}

    /**
     * Creates a new IdValueObject
     * @param id The ID value, can be a number or a string representation of a number
     * @returns IdValueObject or Error
     */
    static create(id: number | string | undefined): IdValueObject | Error {
        // If id is undefined
        if (id === undefined) {
            return new Error("ID não pode ser indefinido");
        }

        // Handle numeric 0 (valid for ID that will be generated by the db)
        if (typeof id === "number" && id === 0) {
            return new IdValueObject(0);
        }

        // For strings, convert to number
        if (typeof id === "string") {
            const parsedId = parseInt(id, 10);

            if (isNaN(parsedId)) {
                return new Error("ID deve ser um número válido");
            }

            if (parsedId >= 0) {
                return new IdValueObject(parsedId);
            } else {
                return new Error("ID deve ser um número positivo");
            }
        }

        // For numeric values
        if (typeof id === "number") {
            if (isNaN(id)) {
                return new Error("ID não pode ser NaN");
            }

            if (id >= 0) {
                return new IdValueObject(Math.floor(id)); // Ensure integer
            } else {
                return new Error("ID deve ser um número positivo");
            }
        }

        // Any other type (null, boolean, object, etc.)
        return new Error("Tipo de ID inválido");
    }

    equals(id?: IdValueObject): boolean {
        if (!id) {
            return false;
        }
        return this.value === id.value;
    }

    toString(): string {
        return String(this.value);
    }
}
